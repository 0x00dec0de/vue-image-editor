webpackHotUpdate(0,{

/***/ 3:
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(5)(true);\n// imports\n\n\n// module\nexports.push([module.i, \"\\n.overflow {\\n  overflow: hidden;\\n}\\n\", \"\", {\"version\":3,\"sources\":[\"/Develop/vue-image-editor/client/app/pages/client/app/pages/edit.vue\"],\"names\":[],\"mappings\":\";AAwWA;EACA,iBAAA;CACA\",\"file\":\"edit.vue\",\"sourcesContent\":[\"<template>\\n  <div class=\\\"full\\\">\\n\\n    <div class=\\\"box2 text-center show-md-under\\\">\\n      <h2 class=\\\"primary-dark\\\">Editor</h2>\\n      <div class=\\\"text-subline center\\\"></div>\\n    </div>\\n\\n    <div class=\\\"row condensed\\\">\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"column\\\">\\n          <div class=\\\"box\\\">\\n            <div class=\\\"preview Frame\\\">\\n              <img class=\\\"background\\\" :src=\\\"frame\\\" alt=\\\"\\\">\\n              <Preview :matrix=\\\"matrix\\\" v-if=\\\"image\\\" ref=\\\"preview\\\" :image=\\\"image\\\" :transform=\\\"transform\\\" @resized=\\\"areaResized\\\" @loaded=\\\"imageLoaded\\\" @moved=\\\"imageMoved\\\" />\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      <div class=\\\"col-md-6\\\">\\n        <div class=\\\"column pt3\\\">\\n\\n          <div class=\\\"box image-editor-form relative\\\">\\n\\n            <div class=\\\"pb1 hide-md-under\\\">\\n              <h2 class=\\\"primary-dark\\\">Editor</h2>\\n              <div class=\\\"text-subline\\\"></div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n              <label>Zoom</label>\\n              <div class=\\\"zoom-control mt2\\\">\\n                <div class=\\\"minus\\\"></div>\\n                <input type=\\\"range\\\" :min=\\\"minZoom\\\" :max=\\\"maxZoom\\\" step=\\\"any\\\" @change=\\\"onZoomEnd\\\" v-model.number=\\\"transform.zoom\\\" :disabled=\\\"!imageReady\\\" />\\n                <div class=\\\"plus\\\"></div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"mt2 flex-row\\\">\\n              <div class=\\\"btn-icon icon-rotate-left\\\" @click=\\\"rotateMinus\\\" :disabled=\\\"!imageReady\\\"><span>Rotate left</span></div>\\n              <div class=\\\"btn-icon icon-rotate-right\\\" @click=\\\"rotatePlus\\\" :disabled=\\\"!imageReady\\\"><span>Rotate right</span></div>\\n              <div class=\\\"btn-icon icon-flop\\\" @click=\\\"flipY\\\" :disabled=\\\"!imageReady\\\"><span>Flip horizontal</span></div>\\n              <div class=\\\"btn-icon icon-flip\\\" @click=\\\"flipX\\\" :disabled=\\\"!imageReady\\\"><span>Flip vertical</span></div>\\n            </div>\\n\\n            <div class=\\\"mt3 btn-group text-md-center\\\">\\n              <button class=\\\"btn btn-primary btn-loading\\\" :class=\\\"{load: nextLoading}\\\" type=\\\"button\\\" @click=\\\"updateImage\\\" :disabled=\\\"!imageReady\\\">Save</button>\\n            </div>\\n\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n\\n  </div>\\n</template>\\n\\n<script>\\nimport config from '@/config';\\nimport Preview from '@/components/ui/preview';\\n\\nclass Transform {\\n  constructor(center, matrix){\\n    this.init(center, matrix);\\n  }\\n\\n  init(center, matrix){\\n    if(center) this.center = Object.assign({},center);\\n    if(matrix) this.matrix = Object.assign({},matrix);\\n  }\\n\\n  getOrigins(current){\\n    //переходим в локальную систему кординат\\n    let tr = {x: current.x - this.center.x, y: current.y - this.center.y};\\n    //рассчитываем обратную трансформацию и переходим в нулевую систему кординат\\n    const det = 1/(this.matrix.a*this.matrix.d - this.matrix.c*this.matrix.b);\\n    const x = ( this.matrix.d*(tr.x - this.matrix.tx) - this.matrix.c*(tr.y - this.matrix.ty) ) * det + this.center.x;\\n    const y = (-this.matrix.b*(tr.x - this.matrix.tx) + this.matrix.a*(tr.y - this.matrix.ty) ) * det + this.center.y;\\n    return {x, y};\\n  }\\n\\n  translate(current){\\n    //переходим в локальную систему кординат\\n    const origin = {x: current.x - this.center.x, y: current.y - this.center.y};\\n    //рассчитаем трансформацию и возвращаемся во внешнюю систему кординат\\n    let x = this.matrix.a*origin.x + this.matrix.c*origin.y + this.matrix.tx + this.center.x;\\n    let y = this.matrix.b*origin.x + this.matrix.d*origin.y + this.matrix.ty + this.center.y;\\n    return {x, y};\\n  }\\n}\\n\\nfunction getRotation(deg, matrix = false) {\\n  let rotation = deg%360;\\n  if(deg < 0) rotation = 360 + rotation;\\n  if(rotation == 360) rotation = 0;\\n  return rotation;\\n}\\n\\nfunction getMatrix(transform) {\\n  let scaleX = transform.flop ? transform.zoom : transform.zoom;\\n  let scaleY = transform.flip ? -transform.zoom : transform.zoom;\\n  let tx = transform.x;\\n  let ty = transform.y;\\n  const cos = Math.cos(transform.rotate * Math.PI / 180);\\n  const sin = Math.sin(transform.rotate * Math.PI / 180);\\n  let a = Math.round(cos)*scaleX;\\n  let b = Math.round(sin)*scaleX;\\n  let c = -Math.round(sin)*scaleY;\\n  let d = Math.round(cos)*scaleY;\\n\\n  //flop: a < 0\\n  //flip: d < 0\\n  //rotate: a == 0 && d == 0\\n\\n  return { a, b, c, d, tx, ty };\\n}\\n\\nexport default {\\n  components: { Preview },\\n  data () {\\n    return {\\n      clip: {\\n        top: 0,\\n        right: 0,\\n        bottom: 0,\\n        left: 0\\n      },\\n      type: null,\\n      image: null,\\n      imageReady: false,\\n      imageRect: {},\\n      areaRect: {},\\n      minZoomValues: {},\\n      minZoom: 0.5,\\n      maxZoom: 2,\\n      transform: {\\n        center: {\\n          x: 0,\\n          y: 0,\\n        },\\n        zoom: 1,\\n        rotate: 0,\\n        flip: false,\\n        flop: false,\\n        x: 0,\\n        y: 0\\n      },\\n      loadedTransform: null,\\n      nextLoading: false,\\n      frame: 'assets/images/frame-printme-white.png'\\n    }\\n  },\\n  computed: {\\n    matrix() {\\n      let scaleX = this.transform.flop ? -this.transform.zoom : this.transform.zoom;\\n      let scaleY = this.transform.flip ? -this.transform.zoom : this.transform.zoom;\\n      let tx = this.transform.x;\\n      let ty = this.transform.y;\\n      const cos = Math.cos(this.transform.rotate * Math.PI / 180);\\n      const sin = Math.sin(this.transform.rotate * Math.PI / 180);\\n      let a = Math.round(cos)*scaleX;\\n      let b = Math.round(sin)*scaleX;\\n      let c = -Math.round(sin)*scaleY;\\n      let d = Math.round(cos)*scaleY;\\n\\n      return { a, b, c, d, tx, ty };\\n    }\\n  },\\n  mounted(){\\n    this.image = 'assets/images/demo.jpg';\\n  },\\n  methods: {\\n\\n    imageLoaded(rect){\\n      this.imageReady = true;\\n      this.imageRect = rect;\\n      this.imageRect = {\\n        size: {\\n          width: rect.size.width,\\n          height: rect.size.height\\n        },\\n        center: {\\n          x: rect.center.x,\\n          y: rect.center.y\\n        }\\n      };\\n\\n      this._setMinZoom();\\n      this._setMaxZoom();\\n      this.transform.zoom = this.minZoom;\\n\\n      if(this.loadedTransform) this.transform = this.loadedTransform;\\n      this._translate();\\n    },\\n\\n    _setMinZoom(){\\n      let rotate = this.matrix.c !== 0;\\n      let horizontal = this.imageRect.size.height < this.imageRect.size.width;\\n      let areaSize = (horizontal && !rotate || !horizontal && rotate) ? this.areaRect.size.width : this.areaRect.size.height;\\n      let imageSize = horizontal ? this.imageRect.size.width : this.imageRect.size.height;\\n\\n      this.minZoom = areaSize/imageSize;\\n      if(this.transform.zoom < this.minZoom) this.transform.zoom = this.minZoom;\\n    },\\n\\n    _setMaxZoom(){\\n      this.maxZoom = this.areaRect.size.width/config.image.minResolution;\\n      if(this.transform.zoom > this.maxZoom) this.transform.zoom = this.maxZoom;\\n    },\\n\\n    areaResized(rect){\\n      this.areaRect = rect;\\n      if(this.imageReady) this._translate();\\n    },\\n\\n    onZoomEnd(){\\n      this._translate();\\n    },\\n\\n    flipX(){\\n      this.matrix.b == 0 && this.matrix.c == 0\\n      ? this.transform.flip = !this.transform.flip\\n      : this.transform.flop = !this.transform.flop;\\n    },\\n\\n    flipY(){\\n      this.matrix.b == 0 && this.matrix.c == 0\\n      ? this.transform.flop = !this.transform.flop\\n      : this.transform.flip = !this.transform.flip;\\n    },\\n\\n    rotatePlus(){\\n      this.transform.rotate += 90;\\n      this._setMinZoom();\\n      this._translate();\\n    },\\n\\n    rotateMinus(){\\n      this.transform.rotate -= 90;\\n      this._setMinZoom();\\n      this._translate();\\n    },\\n\\n    imageMoved(translate){\\n      this._translate();\\n    },\\n\\n    _translate(checkAlign = true){\\n      const tr = new Transform(this.transform.center, this.matrix);\\n\\n      //находим координаты, которые, после трансформации, должны совпасть с центром области кропа\\n      const newCenter = tr.getOrigins(this.areaRect.center);\\n      this.transform.center = newCenter;\\n      //пересчитываем смещение для компенсации сдвига центра\\n      this.transform.x = this.areaRect.center.x - newCenter.x;\\n      this.transform.y = this.areaRect.center.y - newCenter.y;\\n\\n      //обновляем координаты центра\\n      tr.init(this.transform.center, this.matrix);\\n\\n      //рассчитываем кординаты верхнего левого и нижнего правого углов изображения, которые получились после применения трансформации\\n      let x0y0 = tr.translate({x: 0, y: 0});\\n      let x1y1 = tr.translate({x: this.imageRect.size.width, y: this.imageRect.size.height});\\n\\n      //находим расположение (относительно области кропа) крайних точек изображения и его размер\\n      let result = {\\n        left: x1y1.x - x0y0.x > 0 ? x0y0.x : x1y1.x,\\n        top: x1y1.y - x0y0.y > 0 ? x0y0.y : x1y1.y,\\n        width: Math.abs(x1y1.x - x0y0.x),\\n        height: Math.abs(x1y1.y - x0y0.y)\\n      };\\n\\n      //находим смещения относительно области кропа и выравниваем изображение, если появились \\\"зазоры\\\"\\n      //align functions\\n      let rightOffset = this.areaRect.size.width - (result.left + result.width);\\n      let bottomOffset = this.areaRect.size.height - (result.top + result.height);\\n\\n      let alignedCenter;\\n\\n\\n      //вырайниваем по горизонтали\\n      if(this.areaRect.size.width - result.width > 1){\\n        //align center X\\n        alignedCenter = tr.getOrigins({x: result.left + result.width/2, y: this.areaRect.center.y});\\n      }else{\\n        //align left\\n        if(result.left > 0){\\n          alignedCenter = tr.getOrigins({x: result.left + this.areaRect.center.x, y: this.areaRect.center.y});\\n        //align right\\n        }else if(rightOffset > 0){\\n          alignedCenter = tr.getOrigins({x: this.areaRect.center.x - rightOffset, y: this.areaRect.center.y});\\n        }\\n      }\\n\\n      if(alignedCenter){\\n        this.transform.center = alignedCenter;\\n        this.transform.x = this.areaRect.center.x - alignedCenter.x;\\n        this.transform.y = this.areaRect.center.y - alignedCenter.y;\\n        tr.init(this.transform.center, this.matrix);\\n      }\\n\\n      //вырайниваем по вертикали\\n      if(this.areaRect.size.height - result.height > 1){\\n        //align center Y\\n        alignedCenter = tr.getOrigins({x: this.areaRect.center.x, y: result.top + result.height/2});\\n      }else{\\n        //align top\\n        if(result.top > 0){\\n          alignedCenter = tr.getOrigins({x: this.areaRect.center.x, y: result.top + this.areaRect.center.y});\\n        //align bottom\\n        }else if(bottomOffset > 0){\\n          alignedCenter = tr.getOrigins({x: this.areaRect.center.x, y: this.areaRect.center.y - bottomOffset});\\n        }\\n      }\\n\\n      if(alignedCenter){\\n        this.transform.center = alignedCenter;\\n        this.transform.x = this.areaRect.center.x - alignedCenter.x;\\n        this.transform.y = this.areaRect.center.y - alignedCenter.y;\\n        tr.init(this.transform.center, this.matrix);\\n      }\\n\\n    },\\n\\n    updateImage(){\\n      const tr = new Transform(this.transform.center, this.matrix);\\n      let topLeft = tr.getOrigins({x: 0, y: 0});\\n      let bottomRight = tr.getOrigins({x: this.areaRect.size.width, y: this.areaRect.size.height});\\n\\n      const left = topLeft.x < bottomRight.x ? Math.round(topLeft.x) : Math.round(bottomRight.x);\\n      const top = topLeft.y < bottomRight.y ? Math.round(topLeft.y) : Math.round(bottomRight.y);\\n      const width = Math.round(Math.abs(bottomRight.x - topLeft.x));\\n      const height = Math.round(Math.abs(bottomRight.y - topLeft.y));\\n\\n      const data = {\\n        transform: this.transform,\\n        crop: {\\n          size: this.imageRect.size,\\n          original: this.transform,\\n          flip: this.transform.flip,\\n          flop: this.transform.flop,\\n          rotate: this.transform.rotate,\\n          crop: { left, top, width, height }\\n        }\\n      };\\n\\n      this.nextLoading = true;\\n\\n      console.log(data)\\n      alert(JSON.stringify(data))\\n      //some API\\n\\n      this.nextLoading = false;\\n    }\\n\\n  }\\n}\\n</script>\\n\\n<style lang=\\\"css\\\">\\n  .overflow {\\n    overflow: hidden;\\n  }\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),

/***/ 9:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__config__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_ui_preview__ = __webpack_require__(19);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\nclass Transform {\n  constructor(center, matrix) {\n    this.init(center, matrix);\n  }\n\n  init(center, matrix) {\n    if (center) this.center = Object.assign({}, center);\n    if (matrix) this.matrix = Object.assign({}, matrix);\n  }\n\n  getOrigins(current) {\n    //переходим в локальную систему кординат\n    let tr = { x: current.x - this.center.x, y: current.y - this.center.y };\n    //рассчитываем обратную трансформацию и переходим в нулевую систему кординат\n    const det = 1 / (this.matrix.a * this.matrix.d - this.matrix.c * this.matrix.b);\n    const x = (this.matrix.d * (tr.x - this.matrix.tx) - this.matrix.c * (tr.y - this.matrix.ty)) * det + this.center.x;\n    const y = (-this.matrix.b * (tr.x - this.matrix.tx) + this.matrix.a * (tr.y - this.matrix.ty)) * det + this.center.y;\n    return { x, y };\n  }\n\n  translate(current) {\n    //переходим в локальную систему кординат\n    const origin = { x: current.x - this.center.x, y: current.y - this.center.y };\n    //рассчитаем трансформацию и возвращаемся во внешнюю систему кординат\n    let x = this.matrix.a * origin.x + this.matrix.c * origin.y + this.matrix.tx + this.center.x;\n    let y = this.matrix.b * origin.x + this.matrix.d * origin.y + this.matrix.ty + this.center.y;\n    return { x, y };\n  }\n}\n\nfunction getRotation(deg, matrix = false) {\n  let rotation = deg % 360;\n  if (deg < 0) rotation = 360 + rotation;\n  if (rotation == 360) rotation = 0;\n  return rotation;\n}\n\nfunction getMatrix(transform) {\n  let scaleX = transform.flop ? transform.zoom : transform.zoom;\n  let scaleY = transform.flip ? -transform.zoom : transform.zoom;\n  let tx = transform.x;\n  let ty = transform.y;\n  const cos = Math.cos(transform.rotate * Math.PI / 180);\n  const sin = Math.sin(transform.rotate * Math.PI / 180);\n  let a = Math.round(cos) * scaleX;\n  let b = Math.round(sin) * scaleX;\n  let c = -Math.round(sin) * scaleY;\n  let d = Math.round(cos) * scaleY;\n\n  //flop: a < 0\n  //flip: d < 0\n  //rotate: a == 0 && d == 0\n\n  return { a, b, c, d, tx, ty };\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  components: { Preview: __WEBPACK_IMPORTED_MODULE_1__components_ui_preview__[\"a\" /* default */] },\n  data() {\n    return {\n      clip: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      },\n      type: null,\n      image: null,\n      imageReady: false,\n      imageRect: {},\n      areaRect: {},\n      minZoomValues: {},\n      minZoom: 0.5,\n      maxZoom: 2,\n      transform: {\n        center: {\n          x: 0,\n          y: 0\n        },\n        zoom: 1,\n        rotate: 0,\n        flip: false,\n        flop: false,\n        x: 0,\n        y: 0\n      },\n      loadedTransform: null,\n      nextLoading: false,\n      frame: 'assets/images/frame-printme-white.png'\n    };\n  },\n  computed: {\n    matrix() {\n      let scaleX = this.transform.flop ? -this.transform.zoom : this.transform.zoom;\n      let scaleY = this.transform.flip ? -this.transform.zoom : this.transform.zoom;\n      let tx = this.transform.x;\n      let ty = this.transform.y;\n      const cos = Math.cos(this.transform.rotate * Math.PI / 180);\n      const sin = Math.sin(this.transform.rotate * Math.PI / 180);\n      let a = Math.round(cos) * scaleX;\n      let b = Math.round(sin) * scaleX;\n      let c = -Math.round(sin) * scaleY;\n      let d = Math.round(cos) * scaleY;\n\n      return { a, b, c, d, tx, ty };\n    }\n  },\n  mounted() {\n    this.image = 'assets/images/demo.jpg';\n  },\n  methods: {\n\n    imageLoaded(rect) {\n      this.imageReady = true;\n      this.imageRect = rect;\n      this.imageRect = {\n        size: {\n          width: rect.size.width,\n          height: rect.size.height\n        },\n        center: {\n          x: rect.center.x,\n          y: rect.center.y\n        }\n      };\n\n      this._setMinZoom();\n      this._setMaxZoom();\n      this.transform.zoom = this.minZoom;\n\n      if (this.loadedTransform) this.transform = this.loadedTransform;\n      this._translate();\n    },\n\n    _setMinZoom() {\n      let rotate = this.matrix.c !== 0;\n      let horizontal = this.imageRect.size.height < this.imageRect.size.width;\n      let areaSize = horizontal && !rotate || !horizontal && rotate ? this.areaRect.size.width : this.areaRect.size.height;\n      let imageSize = horizontal ? this.imageRect.size.width : this.imageRect.size.height;\n\n      this.minZoom = areaSize / imageSize;\n      if (this.transform.zoom < this.minZoom) this.transform.zoom = this.minZoom;\n    },\n\n    _setMaxZoom() {\n      this.maxZoom = this.areaRect.size.width / __WEBPACK_IMPORTED_MODULE_0__config__[\"a\" /* default */].image.minResolution;\n      if (this.transform.zoom > this.maxZoom) this.transform.zoom = this.maxZoom;\n    },\n\n    areaResized(rect) {\n      this.areaRect = rect;\n      if (this.imageReady) this._translate();\n    },\n\n    onZoomEnd() {\n      this._translate();\n    },\n\n    flipX() {\n      this.matrix.b == 0 && this.matrix.c == 0 ? this.transform.flip = !this.transform.flip : this.transform.flop = !this.transform.flop;\n    },\n\n    flipY() {\n      this.matrix.b == 0 && this.matrix.c == 0 ? this.transform.flop = !this.transform.flop : this.transform.flip = !this.transform.flip;\n    },\n\n    rotatePlus() {\n      this.transform.rotate += 90;\n      this._setMinZoom();\n      this._translate();\n    },\n\n    rotateMinus() {\n      this.transform.rotate -= 90;\n      this._setMinZoom();\n      this._translate();\n    },\n\n    imageMoved(translate) {\n      this._translate();\n    },\n\n    _translate(checkAlign = true) {\n      const tr = new Transform(this.transform.center, this.matrix);\n\n      //находим координаты, которые, после трансформации, должны совпасть с центром области кропа\n      const newCenter = tr.getOrigins(this.areaRect.center);\n      this.transform.center = newCenter;\n      //пересчитываем смещение для компенсации сдвига центра\n      this.transform.x = this.areaRect.center.x - newCenter.x;\n      this.transform.y = this.areaRect.center.y - newCenter.y;\n\n      //обновляем координаты центра\n      tr.init(this.transform.center, this.matrix);\n\n      //рассчитываем кординаты верхнего левого и нижнего правого углов изображения, которые получились после применения трансформации\n      let x0y0 = tr.translate({ x: 0, y: 0 });\n      let x1y1 = tr.translate({ x: this.imageRect.size.width, y: this.imageRect.size.height });\n\n      //находим расположение (относительно области кропа) крайних точек изображения и его размер\n      let result = {\n        left: x1y1.x - x0y0.x > 0 ? x0y0.x : x1y1.x,\n        top: x1y1.y - x0y0.y > 0 ? x0y0.y : x1y1.y,\n        width: Math.abs(x1y1.x - x0y0.x),\n        height: Math.abs(x1y1.y - x0y0.y)\n      };\n\n      //находим смещения относительно области кропа и выравниваем изображение, если появились \"зазоры\"\n      //align functions\n      let rightOffset = this.areaRect.size.width - (result.left + result.width);\n      let bottomOffset = this.areaRect.size.height - (result.top + result.height);\n\n      let alignedCenter;\n\n      //вырайниваем по горизонтали\n      if (this.areaRect.size.width - result.width > 1) {\n        //align center X\n        alignedCenter = tr.getOrigins({ x: result.left + result.width / 2, y: this.areaRect.center.y });\n      } else {\n        //align left\n        if (result.left > 0) {\n          alignedCenter = tr.getOrigins({ x: result.left + this.areaRect.center.x, y: this.areaRect.center.y });\n          //align right\n        } else if (rightOffset > 0) {\n          alignedCenter = tr.getOrigins({ x: this.areaRect.center.x - rightOffset, y: this.areaRect.center.y });\n        }\n      }\n\n      if (alignedCenter) {\n        this.transform.center = alignedCenter;\n        this.transform.x = this.areaRect.center.x - alignedCenter.x;\n        this.transform.y = this.areaRect.center.y - alignedCenter.y;\n        tr.init(this.transform.center, this.matrix);\n      }\n\n      //вырайниваем по вертикали\n      if (this.areaRect.size.height - result.height > 1) {\n        //align center Y\n        alignedCenter = tr.getOrigins({ x: this.areaRect.center.x, y: result.top + result.height / 2 });\n      } else {\n        //align top\n        if (result.top > 0) {\n          alignedCenter = tr.getOrigins({ x: this.areaRect.center.x, y: result.top + this.areaRect.center.y });\n          //align bottom\n        } else if (bottomOffset > 0) {\n          alignedCenter = tr.getOrigins({ x: this.areaRect.center.x, y: this.areaRect.center.y - bottomOffset });\n        }\n      }\n\n      if (alignedCenter) {\n        this.transform.center = alignedCenter;\n        this.transform.x = this.areaRect.center.x - alignedCenter.x;\n        this.transform.y = this.areaRect.center.y - alignedCenter.y;\n        tr.init(this.transform.center, this.matrix);\n      }\n    },\n\n    updateImage() {\n      const tr = new Transform(this.transform.center, this.matrix);\n      let topLeft = tr.getOrigins({ x: 0, y: 0 });\n      let bottomRight = tr.getOrigins({ x: this.areaRect.size.width, y: this.areaRect.size.height });\n\n      const left = topLeft.x < bottomRight.x ? Math.round(topLeft.x) : Math.round(bottomRight.x);\n      const top = topLeft.y < bottomRight.y ? Math.round(topLeft.y) : Math.round(bottomRight.y);\n      const width = Math.round(Math.abs(bottomRight.x - topLeft.x));\n      const height = Math.round(Math.abs(bottomRight.y - topLeft.y));\n\n      const data = {\n        transform: this.transform,\n        crop: {\n          size: this.imageRect.size,\n          original: this.transform,\n          flip: this.transform.flip,\n          flop: this.transform.flop,\n          rotate: this.transform.rotate,\n          crop: { left, top, width, height }\n        }\n      };\n\n      this.nextLoading = true;\n\n      console.log(data);\n      alert(JSON.stringify(data));\n      //some API\n\n      this.nextLoading = false;\n    }\n\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n");

/***/ })

})